(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.img = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

module.exports = img;

var _utils = require("./utils");

var load_image = _utils.load_image;
var create_image_data = _utils.create_image_data;
var clone_image_data = _utils.clone_image_data;
var multiply_matrix = _utils.multiply_matrix;

function img(src) {
  return unit(src);
}

var proto = {};

function unit(src) {
  var promise = src instanceof Promise ? src : load_image(src);

  promise["catch"](function (e) {
    console.log("load promise failed", e);
  });

  var monad = Object.create(proto);

  monad.bind = function (func) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return unit(promise.then(function (img) {
      //var t1 = performance.now();
      var res = func.apply(undefined, [img].concat(args));
      //var t2 = performance.now();
      //console.log('timing is ', t2-t1, func.toString().match(/^function\s(\w+)/)[1]);

      return res;
    }));
  };

  return monad;
}

function lift(name, func) {
  proto[name] = function () {
    var _ref;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (_ref = this).bind.apply(_ref, [func].concat(args));
  };
}

lift("outputTo", function outputTo(data, el) {
  var c = document.createElement("canvas");
  c.width = data.width;c.height = data.height;

  var ctx = c.getContext("2d");
  ctx.putImageData(data, 0, 0);

  el.innerHTML = "";
  el.appendChild(c);
});

lift("identity", function (data) {
  var new_data = create_image_data(data.width, data.height);
  var cur_pos, new_pos;

  for (var x = 0; x < data.width; ++x) {
    for (var y = 0; y < data.height; ++y) {
      cur_pos = (y * data.width + x) * 4;
      new_pos = (y * data.width + x) * 4;

      new_data.data[new_pos] = data.data[cur_pos];
      new_data.data[new_pos + 1] = data.data[cur_pos + 1];
      new_data.data[new_pos + 2] = data.data[cur_pos + 2];
      new_data.data[new_pos + 3] = data.data[cur_pos + 3];
    }
  }

  return new_data;
});

lift("identity2", function (data) {
  var new_data = clone_image_data(data);

  return multiply_matrix(new_data, [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]);
});

lift("flipY", function (data) {
  var new_data = create_image_data(data.width, data.height);
  var cur_pos, new_pos;

  for (var x = 0; x < data.width; ++x) {
    for (var y = 0; y < data.height; ++y) {
      cur_pos = (y * data.width + x) * 4;
      new_pos = ((data.height - y - 1) * data.width + x) * 4;

      new_data.data[new_pos] = data.data[cur_pos];
      new_data.data[new_pos + 1] = data.data[cur_pos + 1];
      new_data.data[new_pos + 2] = data.data[cur_pos + 2];
      new_data.data[new_pos + 3] = data.data[cur_pos + 3];
    }
  }

  return new_data;
});

lift("flipX", function (data) {
  var new_data = create_image_data(data.width, data.height);
  var cur_pos, new_pos;

  for (var x = 0; x < data.width; ++x) {
    for (var y = 0; y < data.height; ++y) {
      cur_pos = (y * data.width + x) * 4;
      new_pos = (y * data.width + (data.width - x - 1)) * 4;

      new_data.data[new_pos] = data.data[cur_pos];
      new_data.data[new_pos + 1] = data.data[cur_pos + 1];
      new_data.data[new_pos + 2] = data.data[cur_pos + 2];
      new_data.data[new_pos + 3] = data.data[cur_pos + 3];
    }
  }

  return new_data;
});

lift("inverse", function (data) {
  var new_data = create_image_data(data.width, data.height);
  var cur_pos, new_pos;

  for (var x = 0; x < data.width; ++x) {
    for (var y = 0; y < data.height; ++y) {
      cur_pos = (y * data.width + x) * 4;
      new_pos = (y * data.width + x) * 4;

      new_data.data[new_pos] = 255 - data.data[cur_pos];
      new_data.data[new_pos + 1] = 255 - data.data[cur_pos + 1];
      new_data.data[new_pos + 2] = 255 - data.data[cur_pos + 2];
      new_data.data[new_pos + 3] = data.data[cur_pos + 3];
    }
  }

  return new_data;
});

lift("grayscale", function grayscale2(data) {
  var new_data = clone_image_data(data);

  return multiply_matrix(new_data, [[0.21, 0.72, 0.07, 0], [0.21, 0.72, 0.07, 0], [0.21, 0.72, 0.07, 0], [0, 0, 0, 1]]);
});

},{"./utils":2}],2:[function(require,module,exports){
"use strict";

exports.load_image = load_image;
exports.create_image_data = create_image_data;
exports.clone_image_data = clone_image_data;

/* will modify data inplace */
exports.multiply_matrix = multiply_matrix;
Object.defineProperty(exports, "__esModule", {
  value: true
});

function load_image(src) {
  if (src instanceof Image) {
    return new Promise(function (accept) {
      accept(src);
    });
  }

  return new Promise(function (accept, reject) {
    var img = new Image();
    img.onload = function () {
      var c = document.createElement("canvas");
      c.width = img.width;c.height = img.height;

      var ctx = c.getContext("2d");
      ctx.drawImage(img, 0, 0);

      var image_data = ctx.getImageData(0, 0, c.width, c.height);

      accept(image_data);
      img = null;
    };

    img.onerror = function (err) {
      reject(err);
      img = null;
    };

    img.src = src;
  });
}

function create_image_data(width, height) {
  var c = document.createElement("canvas");

  return c.getContext("2d").createImageData(width, height);
}

function clone_image_data(data) {
  var c = document.createElement("canvas");
  var ctx = c.getContext("2d");

  var width = data.width;
  var height = data.height;

  c.width = width;c.height = height;

  ctx.putImageData(data, 0, 0);
  return ctx.getImageData(0, 0, width, height);
}

function multiply_matrix(data, matrix) {
  if (matrix.length !== 4 || matrix.filter(function (el) {
    return el.length !== 4;
  }).length > 0) throw new Error("filter matrix can be only 4 by 4");

  var max = data.width * data.height;

  var buf = new ArrayBuffer(data.data.length);
  var buf8 = new Uint8ClampedArray(buf);
  var buf32 = new Uint32Array(buf);

  for (var pos = 0; pos < max; ++pos) {
    var real_pos = pos * 4;

    buf32[pos] = data.data[real_pos] * matrix[3][0] + data.data[real_pos + 1] * matrix[3][1] + data.data[real_pos + 2] * matrix[3][2] + data.data[real_pos + 3] * matrix[3][3] << 24 | data.data[real_pos] * matrix[2][0] + data.data[real_pos + 1] * matrix[2][1] + data.data[real_pos + 2] * matrix[2][2] + data.data[real_pos + 3] * matrix[2][3] << 16 | data.data[real_pos] * matrix[1][0] + data.data[real_pos + 1] * matrix[1][1] + data.data[real_pos + 2] * matrix[1][2] + data.data[real_pos + 3] * matrix[1][3] << 8 | data.data[real_pos] * matrix[0][0] + data.data[real_pos + 1] * matrix[0][1] + data.data[real_pos + 2] * matrix[0][2] + data.data[real_pos + 3] * matrix[0][3];
  }

  data.data.set(buf8);

  return data;
}

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;base64,
